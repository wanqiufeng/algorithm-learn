package com.vincent.algorithm.basic.array;

/**
 * 在一条环路上有N个加油站，其中第i个加油站有汽油gas[i]升。
 *
 * 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1个加油站需要消耗汽油cost[i]升。你从其中的一个加油站出发，开始时油箱为空。
 *
 * 如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。
 *
 * 说明:
 *
 * 如果题目有解，该答案即为唯一答案。
 * 输入数组均为非空数组，且长度相同。
 * 输入数组中的元素均为非负数。
 * 示例1:
 *
 * 输入:
 * gas  = [1,2,3,4,5]
 * cost = [3,4,5,1,2]
 *
 * 输出: 3
 *
 * 解释:
 * 从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
 * 开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
 * 开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
 * 开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
 * 开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
 * 开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
 * 因此，3 可为起始索引。
 * 示例 2:
 *
 * 输入:
 * gas  = [2,3,4]
 * cost = [3,4,3]
 *
 * 输出: -1
 *
 * 解释:
 * 你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
 * 我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
 * 开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
 * 开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
 * 你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
 * 因此，无论怎样，你都不可能绕环路行驶一周。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/gas-station
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class GasStation {
    public static void main(String[] args) {

    }

    /**
        读题：
            1.要求找到给定数组中能够顺利走一圈的加油站，所以要挨个将挨个加油站作为起点进行尝试
            2.每个站点能加的油，和到下一站需要消耗的油，都是在当前数组下标。gas[i] 和cost[i]

        需要注意点：
            1.内层循环，是对外层循环选定的起始加油站，进行尝试走。但内层循环不能简单的++。因为有可能越界，所以要单独写块逻辑计算下一个加油站的坐标
     */
    public int canCompleteCircuit(int[] gas, int[] cost) {
        //怎么知道走了一圈？
        //走到最后一个数，还能往下走。
        for(int i=0;i<gas.length;i++) {
            int gasSum = 0;
            for(int j=i;j<gas.length;) {
                gasSum+=gas[j];//到当前站，先加油
                int nextStation ;

                //计算下一站的位置，如果超界，则设置为1
                if(j+1==gas.length) {
                    nextStation = 0;
                } else {
                    nextStation = j+1;
                }

                if(gasSum-cost[j]>=0){
                    //如果能走到下一站，且下一站是起点站，则返回，说明能走一圈
                    if(nextStation == i) {
                        return i;
                    }

                    //如果能走到下一站，但没走一圈，则进行油量扣减，往下一站行驶
                    gasSum-=cost[j];
                    j = nextStation;//相应的，loop下标改成下一站
                } else {
                    break;//如果不能走到下一站，说明当前起点出发是不行的，跳过内层循环，换一个起点
                }
            }
        }
        return -1;//如果执行到这，说明以上都走完了，都没有找到可以走完一圈的加油站，直接返回-1
    }
}
